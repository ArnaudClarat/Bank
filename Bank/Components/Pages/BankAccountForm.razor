@page "/create-account"
@rendermode InteractiveServer
@using Bank.Components.Models

<h3>Create a new bank account</h3>

<EditForm Model="@this" OnValidSubmit="HandleAccountCreation">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="accountType">Account Type:</label>
        <InputSelect id="accountType" class="form-control" @bind-Value="SelectedAccountType">
            <option value="">Select an account type</option>
            <option value="Savings">Savings Account</option>
            <option value="Current">Current Account</option>
        </InputSelect>
    </div>
    <div class="form-group">
        <label for="accountNumber">Account Number:</label>
        <InputText id="accountNumber" class="form-control" @bind-Value="Number"/>
    </div>
    @if (SelectedAccountType == "Current")
    {
        <div class="form-group">
            <label for="creditLine">Credit Line:</label>
            <InputNumber id="creditLine" class="form-control" @bind-Value="CreditLine"/>
        </div>
    }
    <div class="form-group">
        <label for="owner">
            Owner:
            <InputSelect id="owner" class="form-control" @bind-Value="SelectedCustomer">
                <option value="">Select a customer</option>
                @foreach (var customer in Customers)
                {
                    <option value="@customer.FullName">@customer.FullName</option>
                }
            </InputSelect>
        </label>
    </div>

    <button style="margin-top: 10px;" type="submit" class="btn btn-primary">Create Account</button>
</EditForm>

<a href="/" style="margin-top: 10px;" class="btn btn-secondary">Back to List</a>

@code {
    private string? SelectedAccountType { get; set; }
    private string? SelectedCustomer { get; set; }
    private string? Number { get; set; }
    private double CreditLine { get; set; }

    [Inject]
    private BankStateService BankStateService { get; set; }
    private List<Person> Customers = new(); // List of customers loaded from state

    protected override async Task OnInitializedAsync()
    {
        var state = await BankStateService.LoadStateAsync();
        Customers = state.Customers;
    }

    private async Task HandleAccountCreation()
    {
        try
        {
            var state = await BankStateService.LoadStateAsync();
            Person customer = Customers.FirstOrDefault(c => $"{c.FullName}" == SelectedCustomer);

            BankAccount newAccount = SelectedAccountType switch
            {
                "Savings" => new SavingsAccount(Number, customer),
                "Current" => new CurrentAccount(Number, customer, 0, CreditLine),
                _ => throw new ArgumentException("Invalid account type")
            };

            state.Accounts.Add(newAccount);
            await BankStateService.SaveStateAsync(state);

            newAccount = new SavingsAccount("", new Person("", "", DateTime.Now)); // Réinitialiser le formulaire
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
        }
    }
}